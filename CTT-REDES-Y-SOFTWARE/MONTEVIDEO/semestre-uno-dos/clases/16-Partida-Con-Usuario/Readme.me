Ventajas del patrón Singleton:
Única conexión activa: Solo se crea una instancia de la conexión a la base de datos durante la ejecución del script, 
lo que mejora el rendimiento.
Fácil acceso global: Desde cualquier parte de tu aplicación puedes obtener la conexión a la base de datos utilizando Conexion::getInstancia().
Control centralizado: Todas las operaciones relacionadas con la conexión están centralizadas en una única clase, 
lo que facilita el mantenimiento y la gestión de la conexión.
Esta implementación garantiza que solo tendrás una única conexión activa a la base de datos, 
haciendo más eficiente el uso de recursos y evitando problemas como la creación de múltiples conexiones innecesarias.

Atributo estático $instancia:
Esta variable estática es donde almacenamos la única instancia de la clase Conexion. 
Al ser estática, persiste a lo largo de toda la ejecución del script.

Constructor privado:
El constructor está declarado como private, lo que impide que otras clases o partes del programa 
puedan crear una instancia directamente usando new Conexion(). Esto es clave en el patrón Singleton.

Método estático getInstancia():
Este método se encarga de crear la instancia única de la clase si aún no existe. Si ya existe, simplemente devuelve la instancia existente. 
Es el único punto de acceso para obtener la instancia de la clase.

Método getConexion():
Retorna la conexión a la base de datos que se generó al llamar por primera vez a getInstancia().

__clone() y __wakeup():
Ambos métodos están declarados como private para evitar que el objeto sea clonado o deserializado. 
Esto es parte de las mejores prácticas del patrón Singleton, asegurando que no se puedan crear copias adicionales de la clase.

Método cerrarConexion():
Este método cierra la conexión a la base de datos. 
Si se cierra la conexión, también reinicia la instancia a null, lo que permite crear una nueva conexión en el futuro si es necesario.